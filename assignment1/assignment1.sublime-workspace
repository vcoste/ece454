{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"inet",
				"inet_ntoa"
			],
			[
				"arg4i",
				"arg4Int"
			],
			[
				"arg3i",
				"arg3Int"
			],
			[
				"so",
				"socket"
			],
			[
				"soc",
				"sockaddr_in"
			],
			[
				"ma",
				"main	main()"
			],
			[
				"gets",
				"GetShape1"
			],
			[
				"for",
				"for	for (…) {…}"
			]
		]
	},
	"buffers":
	[
		{
			"file": "server_stub.c",
			"settings":
			{
				"buffer_size": 7580,
				"line_ending": "Unix"
			}
		},
		{
			"file": "serverapp.c",
			"settings":
			{
				"buffer_size": 2766,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <arpa/inet.h>\n#include <netinet/in.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <stdarg.h>\n#include \"ece454rpc_types.h\"\n\n#define BUF_SIZE 65507\n\n/**\n * This is used by the client application program to invoke a remote method. \n * @param  char *   name or IP address of the server to connect to\n * @param  int      port number to connect to on the server\n * @param  char *   name of the procedure to call\n * @param  int      number of parameters sent to the remote method\n * @param  ...      For each of the nparams parameters, we have two arguments:\n *                  <size of the argument,(void *) to the argument>\n * @return          the return value of the remote procedure call with the \n *                  correct type\n */\nreturn_type make_remote_call(   const char *servernameorip,\n                                const int serverportnumber,\n                                const char *procedure_name,\n                                const int nparams,\n                                ...) {\n    // setup UDP connection here\n    struct sockaddr_in server;\n    socklen_t len = sizeof(struct sockaddr_in);\n    char buf[BUF_SIZE];\n    struct hostent *host;\n    int n, s;\n\n    host = gethostbyname(servernameorip);\n    if(host == NULL) {\n        // Hostname not found\n        perror(\"gethostbyname\");\n        return_type *return_error = malloc(sizeof(*return_error));\n        int zero_size = 0;\n        memcpy(&(return_error->return_size), &zero_size, sizeof(zero_size));\n        return_error->return_val = malloc(return_error->return_size);\n        memcpy( return_error->return_val, \n                NULL, \n                return_error->return_size);\n        return *return_error;\n    }\n\n    // initialize socket\n    if((s=socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == -1) {\n        // Error with socket\n        perror(\"socket\");\n        return_type *return_error = malloc(sizeof(*return_error));\n        int zero_size = 0;\n        memcpy(&(return_error->return_size), &zero_size, sizeof(zero_size));\n        return_error->return_val = malloc(return_error->return_size);\n        memcpy( return_error->return_val, \n                NULL, \n                return_error->return_size);\n        close(s);\n        return *return_error;\n    }\n\n    //initialize server addr\n    memset((char *) &server, 0, sizeof(struct sockaddr_in));\n    server.sin_family = AF_INET;\n    server.sin_port = htons(serverportnumber);\n    server.sin_addr = *((struct in_addr*) host->h_addr);\n\n    // construct procedure_call buffer\n    char procedure_call[BUF_SIZE];\n    void * index = procedure_call;\n\n    // copy name of the procedure into procedure_call\n    strcpy(index, procedure_name);\n    index += strlen(procedure_name)+1;\n\n    // copy number of params into procedure_call\n    memcpy((void *)(index), (void *)&nparams, sizeof(int));\n    index += sizeof(int);\n\n    // populating list of arguments into procedure_call\n    va_list arguments;\n    va_start(arguments, nparams);\n    int i;\n    for(i = 0; i < nparams; ++i) {\n        int arg_size = va_arg(arguments, int); \n        memcpy((void *)(index), (void *)&arg_size, sizeof(int));\n        index += sizeof(int);\n\n        void * arg = va_arg(arguments, void *); \n        memcpy((void *)(index), (void *)arg, arg_size);\n        index += arg_size;\n    }\n    \n    // send message\n    if(sendto(  s,\n                procedure_call,\n                sizeof(procedure_call),\n                0,\n                (struct sockaddr *) &server,\n                len) == -1) {\n        perror(\"sendto()\");\n        return_type *return_error = malloc(sizeof(*return_error));\n        int zero_size = 0;\n        memcpy(&(return_error->return_size), &zero_size, sizeof(zero_size));\n        return_error->return_val = malloc(return_error->return_size);\n        memcpy( return_error->return_val, \n                NULL, \n                return_error->return_size);\n        close(s);\n        return *return_error;\n    }\n\n    // receive response.\n    if((n = recvfrom(  s,\n                       buf,\n                       BUF_SIZE,\n                       0,\n                       (struct sockaddr *) &server,\n                       &len)) != -1) {\n        printf(\"In received response (client_stub)\\n\");\n        // received something\n        fflush(stdout);\n\n        if(len>BUF_SIZE) {\n            printf(\"zero size buf (client_stub)\\n\");\n            // Error, BUF_SIZE is too small\n            return_type *return_error = malloc(sizeof(*return_error));\n            int zero_size = 0;\n            memcpy(&(return_error->return_size), &zero_size, sizeof(zero_size));\n            return_error->return_val = malloc(return_error->return_size);\n            memcpy( return_error->return_val, \n                    NULL, \n                    return_error->return_size);\n            close(s);\n            return *return_error;\n        } else {\n            printf(\"parsing response (client_stub)\\n\");\n            // parsing response and creating return_type response object\n            return_type *response = malloc(sizeof(*response));\n            memcpy(&(response->return_size), buf, sizeof(int));\n            if(response->return_size == 0) {\n                printf(\"return_size = 0\\n\");\n                response->return_val = NULL;\n            } else {\n                response->return_val = malloc(response->return_size);\n                memcpy( response->return_val, \n                    (buf + sizeof(int)), \n                    response->return_size);\n            }\n            \n            close(s);\n            return *response;\n        }\n    } else {\n        printf(\"Did NOT receive response (client_stub)\\n\");\n        // nothing received from server, idk if this is used\n\n        return_type *return_error = malloc(sizeof(*return_error));\n        int zero_size = 0;\n        memcpy(&(return_error->return_size), &zero_size, sizeof(zero_size));\n        return_error->return_val = malloc(return_error->return_size);\n        memcpy( return_error->return_val, \n                NULL, \n                return_error->return_size);\n        close(s);\n        return *return_error;\n    }    \n}\n",
			"file": "client_stub.c",
			"file_size": 6216,
			"file_write_time": 130483752520000000,
			"settings":
			{
				"buffer_size": 6216,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include <stdio.h>\n#include <stdlib.h>\n#include \"ece454rpc_types.h\"\n\nint main(int argc, char **argv)\n{\n	char *arg1Str = \"ab\";\n	char *arg2Str = \"cd\";\n	char *arg3Str = \"ef\";\n\n	int arg1Int = 4;\n	int arg2Int = 8;\n	int arg3Int = 5;\n	int arg4Int = 5;\n	int arg5Int = 5;\n\n\n	if (argc == 3){\n\n		printf(\"Sending arg1: %s, arg2: %s\\n\", arg1Str, arg2Str);\n		return_type ans = make_remote_call( argv[1],\n											atoi(argv[2]),\n											\"concattwo\", 2,\n											sizeof(arg1Str), (void *)(arg1Str),\n											sizeof(arg2Str), (void *)(arg2Str));\n		char *result = (char *)ans.return_val;\n		printf(\"Concat, client, got result: %s\\n\", result);\n\n		return_type ans2 = make_remote_call(	argv[1],\n												atoi(argv[2]),\n												\"addtwo\", 2,\n												sizeof(arg1Int), (void *)(&arg1Int),\n												sizeof(arg2Int), (void *)(&arg2Int));\n		int result2 = *(int*)ans2.return_val;\n		printf(\"Add, client got result: %d\\n\", result2);\n\n		return_type ans3 = make_remote_call(	argv[1],\n												atoi(argv[2]),\n												\"addthree\", 5,\n												sizeof(arg1Int), (void *)(&arg1Int),\n												sizeof(arg2Int), (void *)(&arg2Int),\n												sizeof(arg3Int), (void *)(&arg3Int),\n												sizeof(arg4Int), (void *)(&arg4Int),\n												sizeof(arg5Int), (void *)(&arg5Int));\n		int result3 = *(int*)ans3.return_val;\n		printf(\"Add, client got result: %d\\n\", result3);\n	} else {\n		printf(\"Not enough args\\nUseage: <ip address> <port>\\n\");\n	}\n	return 0;\n}",
			"file": "clientapp.c",
			"file_size": 1449,
			"file_write_time": 130457826580000000,
			"settings":
			{
				"buffer_size": 1449,
				"line_ending": "Unix"
			}
		},
		{
			"file": "resources.txt",
			"settings":
			{
				"buffer_size": 410,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 167.0,
		"selected_items":
		[
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"upgrade",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"upd",
				"Package Control: Upgrade Package"
			],
			[
				"update",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"package con",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Add Channel"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/justinwilliams/Dropbox/4A/ECE454 - Distributed Systems/ece454/assignment1/assignment1.sublime-project",
		"/Users/justinwilliams/Dropbox/4A/ECE454 - Distributed Systems/ece454/assignment1/.gitignore",
		"/Users/justinwilliams/Dropbox/4A/ECE454 - Distributed Systems/ece454/assignment1/README",
		"/Users/justinwilliams/Dropbox/4A/ECE454 - Distributed Systems/ece454/assignment1/serverapp.c",
		"/Users/justinwilliams/Dropbox/4A/ECE454 - Distributed Systems/ece454/assignment1/clientapp.c",
		"/Users/justinwilliams/Dropbox/4A/ECE454 - Distributed Systems/ece454/assignment1/test_tool/client_stub.c",
		"/Users/justinwilliams/Dropbox/4A/ECE454 - Distributed Systems/ece454/assignment1/client_stub.c",
		"/Users/justinwilliams/Dropbox/4A/ECE454 - Distributed Systems/ece454/assignment1/test_tool/server_stub.c",
		"/Users/justinwilliams/Dropbox/4A/ECE454 - Distributed Systems/ece454/assignment1/server_stub.c",
		"/Users/justinwilliams/Dropbox/4A/ECE454 - Distributed Systems/ece454/assignment1/test_tool/ece454rpc_types.h",
		"/Users/justinwilliams/Dropbox/4A/ECE454 - Distributed Systems/ece454/assignment1/test_tool/Makefile",
		"/Users/justinwilliams/Dropbox/4A/ECE454 - Distributed Systems/ece454/assignment1/ece454rpc_types.h",
		"/Users/justinwilliams/Dropbox/4A/ECE454 - Distributed Systems/ece454/assignment1/Makefile",
		"/Users/justinwilliams/Dropbox/4A/ECE454 - Distributed Systems/ece454/assignment1/client.out",
		"/Users/justinwilliams/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/justinwilliams/Dropbox/4A/ECE454 - Distributed Systems/ece454/assignment1/server.out",
		"/Users/justinwilliams/Dropbox/4A/ECE454 - Distributed Systems/ece454/assignment1/myserver.c",
		"/Users/justinwilliams/Dropbox/4A/ECE454 - Distributed Systems/ece454/assignment1/myclient.c",
		"/Users/justinwilliams/Dropbox/4A/ECE454 - Distributed Systems/ASS1/resources.txt",
		"/Users/justinwilliams/Dropbox/4A/ECE454 - Distributed Systems/ASS1/client_stub.c",
		"/Users/justinwilliams/Dropbox/4A/ECE454 - Distributed Systems/ASS1/udpClient.c",
		"/Users/justinwilliams/Dropbox/4A/ECE454 - Distributed Systems/ASS1/udpServer.c",
		"/Users/justinwilliams/Dropbox/4A/ECE454 - Distributed Systems/ASS1/.dropbox",
		"/Users/justinwilliams/Library/Application Support/Sublime Text 3/Packages/User/SublimeLinter.sublime-settings",
		"/Users/justinwilliams/Documents/dev/firstJavascript/js/game.js",
		"/Users/justinwilliams/Documents/dev/firstJavascript/js/box2dutils.js",
		"/Users/justinwilliams/Documents/dev/firstJavascript/index.html",
		"/Users/justinwilliams/Downloads/mod_wsgi-3.4/Makefile",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/app/Config/core.php",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/app/Config/database.php",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/lib/Cake/Model/Datasource/Database/Mysql.php",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/app/index.php",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/index.php",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/get-pip.py",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/lib/Cake/Model/Datasource/Database/Postgres.php",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/lib/Cake/Model/Datasource/Database/Sqlite.php",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/lib/Cake/Test/Case/Model/Datasource/Session/DatabaseSessionTest.php",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/lib/Cake/Test/Case/AllDatabaseTest.php",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/lib/Cake/View/Errors/missing_database.ctp",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/lib/Cake/Console/Templates/skel/Config/database.php.default",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/lib/Cake/Model/Datasource/Session/DatabaseSession.php",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/lib/Cake/Test/Case/Controller/Component/Acl/DbAclTest.php",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/app/Config/Schema/db_acl.php",
		"/Applications/MAMP/bin/php/php5.5.10/conf/php.ini",
		"/Users/justinwilliams/Dropbox/webSte/index.php",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/app/Controller/PagesController.php",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/lib/Cake/View/Helper/PaginatorHelper.php",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/lib/Cake/Configure/PhpReader.php",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/lib/Cake/TestSuite/templates/phpunit.php",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/lib/Cake/Test/test_app/Config/htmlhelper_minimized.ini",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/app/Config/database.php.default",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/lib/Cake/Console/ConsoleOutput.php",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/composer.json",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/lib/Cake/Test/Fixture/CounterCachePostNonstandardPrimaryKeyFixture.php",
		"/Users/justinwilliams/Dropbox/webSte/cakephp/lib/Cake/Network/CakeRequest.php"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"printf",
			"prinft",
			"\n	",
			"n",
			"Leaving",
			"printf",
			"getIPaddress",
			"main",
			"Regustering",
			"args-",
			"canvasElem.",
			".dll",
			"extension",
			"extension_dir",
			"pdo",
			"extension_dir",
			"pdo",
			"mysql",
			"sqlite",
			"PDO"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "server_stub.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7580,
						"regions":
						{
						},
						"selection":
						[
							[
								891,
								891
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 3295.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "serverapp.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2766,
						"regions":
						{
						},
						"selection":
						[
							[
								2226,
								2226
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1225.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "client_stub.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6216,
						"regions":
						{
						},
						"selection":
						[
							[
								38,
								38
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "clientapp.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1449,
						"regions":
						{
						},
						"selection":
						[
							[
								1066,
								1073
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "resources.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 410,
						"regions":
						{
						},
						"selection":
						[
							[
								286,
								286
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "assignment1.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"serves",
				"server_stub.c"
			],
			[
				"clients",
				"client_stub.c"
			],
			[
				"make",
				"Makefile"
			],
			[
				"serverp",
				"serverapp.c"
			],
			[
				"inde",
				"~/Documents/dev/firstJavascript/index.html"
			],
			[
				"database",
				"lib/Cake/Model/Datasource/Database/Mysql.php"
			],
			[
				"core.",
				"app/Config/core.php"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 167.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
